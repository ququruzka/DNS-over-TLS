user  nginx;
worker_processes  auto;

load_module modules/ngx_stream_js_module.so;
include /usr/share/nginx/modules/*.conf;

#error_log  /var/log/nginx/error.log notice;
pid        /var/run/nginx.pid;

events {
    worker_connections  1024;
}

http {
	include       /etc/nginx/mime.types;
	default_type  application/octet-stream;
	sendfile            on;
	tcp_nopush          on;
	tcp_nodelay         on;
	keepalive_timeout   6s;
	types_hash_max_size 2048;
	server_tokens off;
	add_header X-XSS-Protection "1; mode=block";
	add_header X-Content-Type-Options nosniff;
	add_header X-Frame-Options SAMEORIGIN;
	add_header Strict-Transport-Security "max-age=31536000" always;
	include /etc/nginx/blockips.conf;

  # logging directives
  log_format  doh   '$remote_addr - $remote_user [$time_local] "$request" '
                    '[ $msec, $request_time, $upstream_response_time $pipe ] '
                    '$status $body_bytes_sent "$http_x_forwarded_for" '
                    '$upstream_http_x_dns_question $upstream_http_x_dns_type '
                    '$upstream_http_x_dns_result '
                    '$upstream_http_x_dns_ttl $upstream_http_x_dns_answers '
                    '$upstream_cache_status';

  #access_log  /var/log/nginx/doh-access.log doh;

  # This upstream connects to a local Stream service which converts HTTP -> DNS
    limit_req_zone $binary_remote_addr zone=flood:50m rate=90r/s;
    limit_conn_zone $binary_remote_addr zone=addr:50m;

    upstream dohloop {
    zone dohloop 64k;
    server ng1:8053;
    #server 738e36.dns.nextdns.io:853;
    keepalive_timeout 60s;
    keepalive_requests 100;
    keepalive 10;
  }
    upstream dohloop2 {
    zone dohloop 64k;
    server ng1:8853;
    keepalive_timeout 60s;
    keepalive_requests 10;
    keepalive 10;
  }


# Proxy Cache storage - so we can cache the DoH response from the upstream
#  proxy_cache_path /var/cache/nginx/doh_cache levels=1:2 keys_zone=doh_cache:10m;

  # The DoH server block
 # resolver 1.1.1.1;
  server {
  
    # Listen on standard HTTPS port, and accept HTTP2, with SSL termination
	listen 443 ssl http2;
	server_name ququruzka.top www.ququruzka.top;
	ssl_certificate /etc/certs/fullchain.pem;
	ssl_certificate_key /etc/certs/privkey.pem;
	ssl_session_cache shared:ssl_cache:10m;
	ssl_session_timeout 5m;
        ssl_session_cache shared:MozSSL:1m;  # about 40000 sessions
        ssl_session_tickets off;
        ssl_dhparam  /etc/certs/ssl-dhparam.pem;
        ssl_protocols TLSv1.3 TLSv1.2;
	ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
        ssl_prefer_server_ciphers on;
	root /usr/share/nginx/html;

    # DoH may use GET or POST requests, Cache both
    proxy_cache_methods GET POST;

    # Return 404 to all responses, except for those using our published DoH URI
    

    location / {
    limit_conn addr 40;
    }


    location /admin {
    limit_conn addr 40;
    proxy_pass  http://pihole/admin;
    proxy_set_header Host $host;
    autoindex on;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }



    location /osm {
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    autoindex on;
    autoindex_exact_size off;
    autoindex_localtime off;
	        }



    # This is our published DoH URI 
    location /dns-query {

      # Proxy HTTP/1.1, clear the connection header to enable Keep-Alive
#      proxy_http_version 1.1;
#      proxy_set_header Connection "";
      limit_conn addr 20;

      # Enable Cache, and set the cache_key to include the request_body
#      proxy_cache doh_cache;
#      proxy_cache_key $scheme$proxy_host$uri$is_args$args$request_body;
#      proxy_set_header Host $host;
#      proxy_set_header X-Real-IP $remote_addr;
#      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

      # proxy pass to the dohloop upstream

      proxy_pass http://dohloop;

                proxy_set_header X-Real-IP \$remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header Host $http_host;
                proxy_set_header X-NginX-Proxy true;
                proxy_http_version 1.1;
                proxy_set_header Upgrade \$http_upgrade;
                proxy_set_header Connection "";
                proxy_redirect off;
                proxy_set_header X-Forwarded-Proto \$scheme;
                proxy_read_timeout 86400;
#               proxy_pass http://dns-backend/dns-query;
#     proxy_ssl off;
    }

#DOH_TEST_LOCATION

location /dns2 {

      # Proxy HTTP/1.1, clear the connection header to enable Keep-Alive
#      proxy_http_version 1.1;
#      proxy_set_header Connection "";
      limit_conn addr 20;

      # Enable Cache, and set the cache_key to include the request_body
#      proxy_cache doh_cache;
#      proxy_cache_key $scheme$proxy_host$uri$is_args$args$request_body;
#      proxy_set_header Host $host;
#      proxy_set_header X-Real-IP $remote_addr;
#      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#      proxy pass to the dohloop upstream

      proxy_pass http://dohloop2;
#
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                proxy_set_header Host $host;
                proxy_set_header X-NginX-Proxy true;
                proxy_http_version 1.1;
                proxy_set_header Upgrade \$http_upgrade;
                proxy_set_header Connection "";
                proxy_redirect off;
                proxy_set_header X-Forwarded-Proto \$scheme;
                proxy_read_timeout 100;
#                proxy_pass http://dns-backend/dns-query;
#     proxy_ssl on;
    }




  }
  server {
   listen 80;
   server_name ququruzka.top ququruzka.top;

#    location ~ /.well-known/acme-challenge {
#        allow all;
#        root /usr/share/nginx/html;
#    }

   root /usr/share/nginx/html;
        index index.html;
        if ($host = ququruzka.top) {
        return 307 https://ququruzka.top;
        } # managed by Certbot
	
	if ($host = www.ququruzka.top) {
        return 307 https://www.ququruzka.top;
        } # managed by Certbot

}
}

# DNS Stream Services
stream {

  # DNS logging
  log_format  dns   '$remote_addr [$time_local] $protocol "$dns_qname"';
  access_log /var/log/nginx/dns-access.log dns;

  # Include the NJS module
  js_include /etc/certs/nginx_stream.js;

  # The $dns_qname variable can be populated by preread calls, and can be used for DNS routing
  js_set $dns_qname dns_get_qname;

  # DNS upstream pool.
    upstream dot {
    zone dot 64k;
    server pihole:53;
  }


# upstream dot2 {
#    zone dot 64k;
#    server 167.71.9.170:853;
#  }


#    upstream doh_docker {
#    zone dot 64k;
#    server 1.1.1.1:53;
#  }



  # DNS(TCP) and DNS over TLS (DoT) Server
  # Terminate DoT and DNS TCP, and proxy onto standard DNS
  server {
    listen 853 ssl;
	ssl_certificate /etc/certs/fullchain.pem;
        ssl_certificate_key /etc/certs/privkey.pem;
        ssl_session_timeout 5m;
#        ssl_session_cache shared:MozSSL:1m;  # about 40000 sessions
        ssl_session_tickets off;
	ssl_dhparam  /etc/certs/ssl-dhparam.pem;
	ssl_protocols TLSv1.3 TLSv1.2;
	ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA256:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA;	
        js_preread dns_preread_dns_request;
	ssl_prefer_server_ciphers on;
        proxy_pass dot;
        proxy_ssl off;
  }

  # DNS(UDP) Server
  # DNS UDP proxy onto DNS UDP
#  server {
#    listen 53 udp;
#    proxy_responses 1;
#    js_preread dns_preread_dns_request;
#    proxy_pass dns;
#  }

  # DNS over HTTPS (gateway) Service
  # Upstream can be either DNS(TCP) or DoT. If upstream is DNS, proxy_ssl should be off.

  server {
    listen ng1:8053;
    js_filter dns_filter_doh_request;
    proxy_pass dot;
    proxy_ssl off;
  }

#server {
#    listen 8853;
#    js_filter dns_filter_doh_request;
#    proxy_pass doh_docker;
#    proxy_ssl off;
#  }



#server {
#    listen 127.0.0.1:5353 udp;
#    js_filter dns_filter_doh_request;
#    proxy_pass dot2;
#    proxy_ssl off;
#  }


}
